//---------------------------------------------------------------------------
//
// Project: OpenWalnut ( http://www.openwalnut.org )
//
// Copyright 2009 OpenWalnut Community, BSV@Uni-Leipzig and CNCF@MPI-CBS
// For more information see http://www.openwalnut.org/copying
//
// This file is part of OpenWalnut.
//
// OpenWalnut is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// OpenWalnut is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with OpenWalnut. If not, see <http://www.gnu.org/licenses/>.
//
//---------------------------------------------------------------------------

// Provide additional material and descriptions for your module. You can
// provide this for multiple modules if you like. 
// The purpose of this file is to allow the developer to provide additional
// material for his module, like documentation links, video tutorials and 
// similar. You should always write such a META file for your module, even
// if you do not provide additional material (for now at least).

///////////////////////////////////////////////////////////////////////////////
// SYNTAX

// The syntax is quite simple for those who know C/C++. There are basically
// two things to know: values, blocks and comments

// 1.) values are simple name-value-pairs. Use the syntax:
//       valueName = "value value value";
//     Note that the value of a variable needs to be embedded into "" and
//     must be terminated with ;
//
// 2.) blocks can be seen as a named group of values or blocks. Use the 
//     syntax:
//       "block name with space and stuff"
//       {
//          values ...
//          block ...
//       };
//     A block is a name (use "" if it contains spaces) and a bunch of 
//     nested values or blocks. They are embedded in pairs of {} and a
//     block is terminated by ;
//
// 3.) Comments ... well as you can see they start with //. Everything after
//     // will be ignored

///////////////////////////////////////////////////////////////////////////////
// USAGE and MEANING

// OpenWalnut defines some values and blocks for certain information which can
// will be used by the UI. But you can define your own too! This is very handy
// if you write your toolboxes and want to avoid hard-coding several values.
//
// 
// 1.) The predefined blocks and values are shown below. At this point, let us
// have a look on how to query your own values:
// 
//   Assume you have a block:
//   "Some Jokes"
//   {
//      "For Scientists"
//      {
//          joke="An electron and a positron walked into a bar ...";
//      }; // <- do not miss the ;
//   }; // <- do not miss the ;
//
//   To query the value of "joke" in your module:
//
//   std::string scienceJoke = getMetaInformation()->query< std::string >(
//      "Some Jokes/For Scientists/joke", // the absolute path
//      "not so funny default joke"       // a default if the element does
//                                        // not exist or cannot be returned
//                                        // as std::string.
//   );
//
//   Thats it. The function getMetaInformation() is a member of WModule,
//   thus you always have it available (but not in the constructor). The
//   remaining part of the code is quite self-explaining. You define a
//   return type and path. The return type tells the system that you expect
//   an std::string at this position. The function tries to cast the found
//   value to this type. The path is an absolute path. Very handy to define
//   a "common" block in your META file to share information amongst multiple
//   modules. (see below)
//
// 2.) The predefined values and blocks are shown below. The UI interprets them
//     and displays it where appropriate. The Qt4 GUI for example show an 
//     "About & Help" tab for each module.
//    
//   NOTE: everything but the module name is optional, even if this makes no
//         sense at all.

///////////////////////////////////////////////////////////////////////////////
// SEMANTICS

// This defines some properties of the module "Template". This must
// match the name specified in WMTemplate::getName().
"Template"
{
  // Provide an icon. If the icon exists, it overrides the one provided by your
  // getXPMIcon method. This path is relative to your module's resource directory.
  icon="WMTemplateIcon.png";

  // Where to find the module?
  website = "http://www.openwalnut.org";

  // Provide a description, If you do so, this description overrides the one
  // provided by your getDescription method.
  // HINT: multi-line strings are not supported. Please provide long texts in
  //       one line.
  description = "Demonstrative module which tries to show the code features in OW and their usage.";

  // Provide the path to the module help file
  // The default path is "help.html" if no other path is specified
  help = "help/index.html";

  // Provide a list of authors. These authors can have further information associated with them. First,
  // define the list of authors
  author = "OpenWalnut Project";
  author = "Students";

  // To provide further details on one or multiple authors, just open a new block called like
  // the author.
  //
  // * all sub-values are optional
  // * Especially a contact address is very handy.
  // * This associates some URL and Mail contact info to "OpenWalnut Project".
  "OpenWalnut Project"
  {
    url="http://www.openwalnut.org";
    email="contact@openwalnut.org";
    what="Design, Development and Bug fixing";
  };

  "Students"
  {
    what="Bug fixing";
  }

  // Provide some tags to have modules nicely grouped and ordered.
  // NOTE: tags are handled case insensitive.
  // IMPORTANT: the order of appearance will be used by OW to classify your tags
  tag = "Tutorial";
  tag = "Scalar";

  // You can provide online resources. They are shown in the GUI. You should
  // additionally provide a description to help the user know what this is.
  online
  {
    // Name that appears for this resource. Required.
    name="First Steps";
    // Optional description for a resource
    description ="First Steps Tutorial, showing the first steps to take with OpenWalnut.";
    // The URL. Required.
    url="https://bsvgit.informatik.uni-leipzig.de/openwalnut/openwalnut/wikis/FirstSteps";
  };
  // Multiple online resources allowed.
  online
  {
    name="Visualization Article";
    description="Description of the term visualization.";
    url="http://en.wikipedia.org/wiki/Visualization_(computer_graphics)";
  };
  online
  {
    name="Video Demonstration";
    description="Video demonstration showing basic working principoles.";
    url="http://www.youtube.com/watch?v=5Afw6P6wWSU&context=C375513dADOEgsToPDskJXOVbrVDAV5rydr7H173AT";
  };

  // You can also provide screenshots with an optional description. Multiple screenshots allowed.
  screenshot
  {
      description = "Some red primitives";
      filename = "templateScreenshot1.png";
  };
  screenshot
  {
      description = "The whole GUI";
      filename = "templateScreenshot2.png";
  };
};

// A block for sharing values amongst all template modules
"common"
{
    // how to say goodbye ...
    goodbye = "Auf Wiedersehen!";   // in german

    // and a useful texture we want to use in some modules. We will load this using WGEImage.
    amazingTexture = "amazingTexture.png";

    // icons used in WMTemplateUI
    settingsIcon = "iconBier.png";
    boolIcon = "iconWurst.png";
    cameraPresetIcon = "iconSteak.png";
};

///////////////////////////////////////////////////////////////////////////////
// Further meta info

// Basically the same as above, without comments. Skip this. It does not contain new information.
"Template UI"
{
  icon="WMTemplateIcon_UI.png";
  website = "http://www.openwalnut.org";
  description = "Demonstrative module which tries to show the custom UI features in OW and its usage.";
  author = "OpenWalnut Project";
  help = "help/index.html";
  "OpenWalnut Project"
  {
    url="http://www.openwalnut.org";
    email="contact@openwalnut.org";
    what="Design, Development and Bug fixing";
  };
  tag = "Tutorial";
  screenshot
  {
      description = "The custom UI";
      filename = "templateUIScreenshot1.png";
  };
};

// Basically the same as above, without comments. Skip this. It does not contain new information.
"Template Containers"
{
  icon="WMTemplateIcon.png";
  website = "http://www.openwalnut.org";
  description = "Demonstrative module which tries to show how to re-use and re-combine existing modules in containers.";
  author = "OpenWalnut Project";
  help = "help/index.html";
  "OpenWalnut Project"
  {
    url="http://www.openwalnut.org";
    email="contact@openwalnut.org";
    what="Design, Development and Bug fixing";
  };
  tag = "Tutorial";
};

// Basically the same as above, without comments. Skip this. It does not contain new information.
"Template Shaders"
{
  icon="WMTemplateIcon_Shader.png";
  website = "http://www.openwalnut.org";
  description = "Demonstration of use and powers of WGEShaders and related interfaces.";
  author = "OpenWalnut Project";
  help = "help/index.html";
  "OpenWalnut Project"
  {
    url="http://www.openwalnut.org";
    email="contact@openwalnut.org";
    what="Design, Development and Bug fixing";
  };
  tag = "Tutorial";
  screenshot
  {
      description = "Slime brain and Spheres. The shader demo.";
      filename = "templateShadersScreenshot1.png";
  };
};

// Basically the same as above, without comments. Skip this. It does not contain new information.
"Template Colormapping"
{
  icon="WMTemplateIcon_Colormap.png";
  website = "http://www.openwalnut.org";
  description = "Demonstration of use and powers of WGEColormapping and related interfaces.";
  author = "OpenWalnut Project";
  help = "help/index.html";
  "OpenWalnut Project"
  {
    url="http://www.openwalnut.org";
    email="contact@openwalnut.org";
    what="Design, Development and Bug fixing";
  };
  screenshot
  {
      description = "Colormapping on some geometry. The WGEColormapping demo. <b>Be aware that a texture is needed!</b> See modules used in the screenshot.";
      filename = "templateColormappingScreenshot1.png";
  };
  tag = "Tutorial";
};

// Basically the same as above, without comments. Skip this. It does not contain new information.
"Template Render Pipelines"
{
  icon="WMTemplateIcon_Render.png";
  website = "http://www.openwalnut.org";
  description = "Demonstration of use and powers of WGEOffscreen and related interfaces.";
  author = "OpenWalnut Project";
  help = "help/index.html";
  "OpenWalnut Project"
  {
    url="http://www.openwalnut.org";
    email="contact@openwalnut.org";
    what="Design, Development and Bug fixing";
  };
  screenshot
  {
      description = "Toon-like rendering using multiple rendering passes. The WGEOffscreen demo.";
      filename = "templateRenderPipelinesScreenshot1.png";
  };
  tag = "Tutorial";
};

// Basically the same as above, without comments. Skip this. It does not contain new information.
"Template Data Loader"
{
  icon="WMTemplateIcon.png";
  website = "http://www.openwalnut.org";
  description = "Demonstration of use and powers of the WDataModule interface to load data from external sources.";
  author = "OpenWalnut Project";
  help = "help/index.html";
  "OpenWalnut Project"
  {
    url="http://www.openwalnut.org";
    email="contact@openwalnut.org";
    what="Design, Development and Bug fixing";
  };
  tag = "Tutorial";
};

